import pandas as pd
import json
from scanpy import AnnData
from ._datastructures import TcrCell, TcrChain
from typing import Iterable, Collection
import numpy as np
from glob import iglob
import os.path


def _check_anndata(adata: AnnData) -> None:
    """Sanity checks on loaded data. Should be executed by 
    every read_xxx function"""
    assert (
        len(adata.X.shape) == 2
    ), "X needs to have dimensions, otherwise concat doesn't work. "


def read_10x(path: str, filtered: bool = True) -> AnnData:
    """Read TCR data from a 10x genomics sample.
    
    Parameters
    ----------
    path
        Path to all_contig_annotations.json
    filtered
        Only keep filtered contig annotations (= is_cell and high_confidence)


    Returns
    -------
    AnnData object with TCR data in `obs` for each cell.  
    """
    with open(path, "r") as f:
        cells = json.load(f)

    tcr_objs = {}
    for cell in cells:
        if filtered and not (cell["is_cell"] and cell["high_confidence"]):
            continue
        barcode = cell["barcode"]
        if barcode not in tcr_objs:
            tcr_obj = TcrCell(barcode)
            tcr_objs[barcode] = tcr_obj
        else:
            tcr_obj = tcr_objs[barcode]

        tcr_obj.add_chain(
            TcrChain(
                chain_type="other",
                cdr3=cell["cdr3"],
                cdr3_nt=cell["cdr3_seq"],
                expr=cell["umi_count"],
                expr_raw=cell["read_count"],
                is_productive=cell["productive"],
            )
        )

    tcr_df = pd.DataFrame()
    barcodes, tcr_df["tcr_objs"] = zip(*tcr_objs.items())
    tcr_df.index = barcodes

    adata = AnnData(obs=tcr_df, X=np.empty([tcr_df.shape[0], 0]))

    _check_anndata(adata)

    return adata


def read_tracer(path: str):
    """Read data from TraCeR. 

    Requires the TraCeR output directory containing a folder for each cell. 
    Unfortunately the results files generated by `tracer summarize` do not
    contain all required information. 
    
    Parameters
    ----------
    path
        Path to the TraCeR output folder. 
    """
    tcr_objs = {}
    for summary_file in iglob(
        os.path.join(path, "**/filtered_TCR_seqs/filtered_TCRs.txt"), recursive=True
    ):
        cell_name = summary_file.split(os.sep)[-3]
        tcr_obj = TcrCell(cell_name)
        with open(summary_file, "r") as f:
            curr_chain = None
            is_in_header_block = True
            is_in_chain_block = False
            is_in_segment_block = False
            curr_attrs = {}
            for line in f.readlines():
                line = line.strip()
                if is_in_header_block:
                    if line.startswith("#TCR_"):
                        if line == "#TCR_A":
                            curr_chain = "TRA"
                        elif line == "#TCR_B#":
                            curr_chain = "TRB"
                        else:
                            curr_chain = "other"
                    if line.startswith("##TRINITY"):
                        is_in_header_block = False
                        is_in_chain_block = True

                if is_in_chain_block:
                    if line.startswith("TPM"):
                        curr_attrs["expr"] = float(line.split("\t")[1])
                    if line.startswith("Productive"):
                        curr_attrs["is_productive"] = bool(line.split("\t")[1])
                    if line.startswith("CDR3aa"):
                        curr_attrs["cdr3"] = line.split("\t")[1]
                    if line.startswith("CDR3nt"):
                        curr_attrs["cdr3_nt"] = line.split("\t")[1]
                    if line == "":
                        is_in_chain_block = False
                        is_in_segment_block = True

                if is_in_segment_block:
                    if line == "":
                        is_in_segment_block = False
                        is_in_header_block = True
                        tcr_obj.add_chain(TcrChain(curr_chain, **curr_attrs))
                        curr_attrs = {}

        tcr_objs[cell_name] = tcr_obj

    tcr_df = pd.DataFrame()
    barcodes, tcr_df["tcr_objs"] = zip(*tcr_objs.items())
    tcr_df.index = barcodes

    adata = AnnData(obs=tcr_df, X=np.empty([tcr_df.shape[0], 0]))

    _check_anndata(adata)

    return adata
